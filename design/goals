Room for growth -- extensible ISA, unassuming data model
Architecture-independence -- data/memory model isolated from host machine data types
reliability -- 100% branch coverage, exception- and thread-safety, re-entracny
Speed -- perfect hashes used where possible, caching elsewhere
Easy to compile to -- no need to calcuate offsets, esp. useful for looser langs (multiple inheritence, duck/dynamic typing)
service-orientation -- provide a library around which many tools can be built
simplicity -- fully regular data model, only two data types

Things I don't care about:
self-modifying code -- it's a dangerous technique with little benefit over computed jumps
I/O operations -- I'm using this inside a compiler; ISA extensions can provide I/O if really needed
load time -- if this matters to someone, they may create their own long-running VM manager around the Aladdin library
space efficiency -- use Dalvik JVM, run Lotus on a nice, big computer and cross-compile if you target mobile/embedded