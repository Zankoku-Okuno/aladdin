/*
 *  errors.d
 *  This file is part of the Aladdin virtual machine.
 *  Copyright (c) 2013, Okuno Zankoku
 *  All rights reserved. 
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this 
 *  list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 *
 *  Neither the name of Okuno Zankoku nor the names of contributors may be used
 *  to endorse or promote products derived from this software without specific
 *  prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY OKUNO ZANKOKU "AS IS" AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 *  EVENT SHALL OKUNO ZANKOKU BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  This file provides the exceptions used by Aladdin. The hierarchy is roughly
 *  as follows: 
 *
 *  AladdinRuntimeErrors are raised by the virtual machine in response to some
 *  inappropriate client code (such as dereferencing uninit'd memory, attempting
 *  illegal operations, &c.).
 *
 *  AladdinPluginErrors are raised when an ISA extension encounters an internal
 *  error (one not generated by the Aladdin runtime). These errors report the
 *  offending plugin and offer access to the original exception.
 *
 *  All Aladdin-detected errors go through the AladdinException class. Errors
 *  that use this class directly include syntax errors or microcode loading
 *  errors.
 *
 *  If there is an internal error in the implementation of Aladdin, then those
 *  errors will not subclass AlladinException, so they may be distinguished from
 *  user errors.
 */

module aladdin.core.errors;


/* ==================================== Leaf Exceptions ==================================== */

/*
 * Attempting to read from uninitialized memory is an error (similar equivalent
 * to a segmentation fault).
 */
final class UninitializedMemory : AladdinRuntimeError {
    this(string file, ulong line, Throwable next = null) {
        super("Attempted to read uninitialized memory.", file, line, next);
    }
}


/* ==================================== Hierarchy Exceptions ==================================== */

/*
 * Base class for all problems detected by the Aladdin machine outside of a machine's runtime.
 */
class AladdinException : Exception {
    this(string msg, string file, ulong line, Throwable next = null) {
        super(msg, file, line, next);
    }
}

/*
 * Base class for all problems generated due to an Aladdin executable not
 * respecting the semantics of the machine or of the operands in an instruction.
 *
 * ISA extension writers may throw errors of this type whenever one of their
 * instructions has been passed inappropriate operands.
 */
class AladdinRuntimeError : AladdinException {
    this(string msg, string file, ulong line, Throwable next = null) {
        super(msg, file, line, next);
    }
}

/*
 * When a plugin fails to catch an internal error (i.e. not an
 * AladdinException), then that exception may be wrapped inside an
 * AladdinPluginException for better diagnostics.
 *
 * While very useful for plugin development, wrapping may be turned off in a
 * production environment to save a few cycles.
 */
class AladdinPluginError : AladdinException {
    this(string msg, Throwable next) { //TODO use better diagnostics
        super(msg, __FILE__, __LINE__, next);
    }
}

