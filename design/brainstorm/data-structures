label: <alphabetic, underscore, or dash> <alphanumeric, underscore, or dash>*
address: <label or bigint> ( . <label or bigint>* )

instruction {
	int opcode
	struct { bool is_num; union { bigint, address } }[3] operands
}

text memory {
	instruction[] code
	int[address] labeled_points
}

data memory {
	union { bigint, address }
	memory[bigint] array
	memory[label] submemories
}

ip { int }


what's perfect-hashable?
	operation names (in fact, just translate to function pointers on load)
	labels (if they exist) must be present in the code text, so we can find all of them during load
	not addresses, since they can be computed arbitrarily at runtime

what's cacheable?
	addresses (fast-forward a memory cell lookup)
	bigints (reduce allocations)

addressing modes:
	immediate (operand interpreted as Datum)
	dereference (operand used to rettrieve a Datum)
	pointer (operand used to retrieve MemoryCell)
	???offset???